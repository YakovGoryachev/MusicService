# Generated by Django 5.2 on 2025-08-31 10:42

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Имя артиста')),
                ('avatar_url', models.URLField(blank=True, max_length=500, null=True, verbose_name='URL аватара')),
                ('biography', models.TextField(blank=True, verbose_name='Биография')),
            ],
            options={
                'verbose_name': 'Артист',
                'verbose_name_plural': 'Артисты',
                'db_table': 'артисты',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название жанра')),
            ],
            options={
                'verbose_name': 'Жанр',
                'verbose_name_plural': 'Жанры',
                'db_table': 'жанры',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Название группы')),
            ],
            options={
                'verbose_name': 'Группа',
                'verbose_name_plural': 'Группы',
                'db_table': 'группа',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('login', models.CharField(max_length=100, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('avatar_url', models.URLField(blank=True, max_length=500, null=True)),
                ('role', models.CharField(choices=[('user', 'User'), ('admin', 'Admin'), ('moderator', 'Moderator')], default='user', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'пользователи',
            },
        ),
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Название альбома')),
                ('release_date', models.DateField(verbose_name='Дата выпуска')),
                ('photo_url', models.URLField(blank=True, max_length=500, null=True, verbose_name='URL фото')),
                ('play_count', models.PositiveIntegerField(default=0, verbose_name='Количество прослушиваний')),
                ('artist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='music.artist', verbose_name='Артист')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='music.group', verbose_name='Группа')),
            ],
            options={
                'verbose_name': 'Альбом',
                'verbose_name_plural': 'Альбомы',
                'db_table': 'альбомы',
            },
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Название плейлиста')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('is_public', models.BooleanField(default=True, verbose_name='Публичный')),
                ('photo_url', models.URLField(blank=True, max_length=500, null=True, verbose_name='URL фото')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Плейлист',
                'verbose_name_plural': 'Плейлисты',
                'db_table': 'плейлисты',
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Название трека')),
                ('duration', models.PositiveIntegerField(verbose_name='Продолжительность (в секундах)')),
                ('file_url', models.URLField(max_length=500, verbose_name='URL файла')),
                ('play_count', models.PositiveIntegerField(default=0, verbose_name='Количество прослушиваний')),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='music.album', verbose_name='Альбом')),
            ],
            options={
                'verbose_name': 'Трек',
                'verbose_name_plural': 'Треки',
                'db_table': 'трек',
            },
        ),
        migrations.CreateModel(
            name='PlaylistTrack',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('added_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='music.playlist', verbose_name='Плейлист')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='music.track', verbose_name='Трек')),
            ],
            options={
                'verbose_name': 'Трек в плейлисте',
                'verbose_name_plural': 'Треки в плейлистах',
                'db_table': 'плейлисты_треки',
                'unique_together': {('playlist', 'track')},
            },
        ),
        migrations.AddField(
            model_name='playlist',
            name='tracks',
            field=models.ManyToManyField(through='music.PlaylistTrack', to='music.track', verbose_name='Треки'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.TextField(verbose_name='Текст комментария')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='music.track', verbose_name='Трек')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
                'db_table': 'комментарий',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrackGenre',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='music.genre', verbose_name='Жанр')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='music.track', verbose_name='Трек')),
            ],
            options={
                'verbose_name': 'Жанр трека',
                'verbose_name_plural': 'Жанры треков',
                'db_table': 'треки_жанры',
                'unique_together': {('track', 'genre')},
            },
        ),
        migrations.AddField(
            model_name='track',
            name='genres',
            field=models.ManyToManyField(through='music.TrackGenre', to='music.genre', verbose_name='Жанры'),
        ),
        migrations.CreateModel(
            name='ArtistGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('artist_role', models.CharField(max_length=100, verbose_name='Роль артиста в группе')),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='music.artist', verbose_name='Артист')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='music.group', verbose_name='Группа')),
            ],
            options={
                'verbose_name': 'Артист в группе',
                'verbose_name_plural': 'Артисты в группах',
                'db_table': 'артист_группа',
                'unique_together': {('group', 'artist')},
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('value', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Оценка')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='music.track', verbose_name='Трек')),
            ],
            options={
                'verbose_name': 'Оценка',
                'verbose_name_plural': 'Оценки',
                'db_table': 'оценка',
                'unique_together': {('user', 'track')},
            },
        ),
    ]
